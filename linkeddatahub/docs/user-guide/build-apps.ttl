@prefix def:    <https://w3id.org/atomgraph/linkeddatahub/default#> .
@prefix ldh:    <https://w3id.org/atomgraph/linkeddatahub#> .
@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd:    <http://www.w3.org/2001/XMLSchema#> .
@prefix dh:     <https://www.w3.org/ns/ldt/document-hierarchy#> .
@prefix dct:    <http://purl.org/dc/terms/> .
@prefix sioc:   <http://rdfs.org/sioc/ns#> .
    
<user-guide/build-apps/> a dh:Item ;
    sioc:has_container <user-guide/> ;
    dct:title "Build apps" ;
    dct:description "Using LinkedDataHub as a low-code platform for Knowledge Graph applications" ;
    rdf:_1 <#content> .
    
<#content> a ldh:Content ;
    rdf:value """<div xmlns="http://www.w3.org/1999/xhtml">
    <p class="lead">Using LinkedDataHub as a low-code platform for Knowledge Graph applications</p>
    <p>Every component in LinkedDataHub is data-driven and was designed with extensibility in mind. You can override behavior (e.g. Java method or XSLT template) without having to modify LinkedDataHub's
        codebase, and more importantly, without having to write the same logic from scratch.</p>
    <p>The following sections are split by component/layer and explain how to extend them when building bespoke apps.</p>
    <div>
        <h2 id="docker">Docker</h2>
        <p>You can go a long way just by mounting files (e.g. config files, ontologies, stylesheets) into LinkedDataHub's default Docker setup. But you may also want to build a dedicated Docker image for your app using LinkedDataHub as the base. Usually this is done to <code>COPY</code> files inside the the image or <code>RUN</code> addition commands.</p>
        <p>Here's an sample Dockerfile that copies custom stylesheets into the app's Docker image:</p>
        <pre>FROM atomgraph/linkeddatahub:4.0.0

ARG SAXON_VERSION=9.9.1-2
 
USER root

RUN curl -fsSL https://deb.nodesource.com/setup_16.x | bash - &amp;&amp; \\
    apt-get update --allow-releaseinfo-change &amp;&amp; \\
    apt-get install -y nodejs &amp;&amp; \\
    rm -rf /var/lib/apt/lists/* &amp;&amp; \\
    mkdir /home/ldh &amp;&amp; chown ldh:ldh /home/ldh

USER ldh

RUN npm install saxon-js &amp;&amp; \\
    npm install xslt3

WORKDIR $CATALINA_HOME/webapps/ROOT/static

COPY --chown=ldh:ldh files/layout.xsl net/example/xsl/layout.xsl
COPY --chown=ldh:ldh files/client.xsl net/example/xsl/client.xsl

# pre-processing stylesheets in order to inline XML entities which SaxonJS does not support
RUN curl https://repo1.maven.org/maven2/net/sf/saxon/Saxon-HE/${SAXON_VERSION}/Saxon-HE-${SAXON_VERSION}.jar -O &amp;&amp; \\
    cat com/atomgraph/linkeddatahub/xsl/client.xsl | grep 'xsl:import' | cut -d '"' -f 2 | xargs -I{} java -cp Saxon-HE-${SAXON_VERSION}.jar net.sf.saxon.Query -qs:"." -s:com/atomgraph/linkeddatahub/xsl/{} -o:com/atomgraph/linkeddatahub/xsl/{} &amp;&amp; \\
    cat com/atomgraph/linkeddatahub/xsl/client.xsl | grep 'xsl:include' | cut -d '"' -f 2 | xargs -I{} java -cp Saxon-HE-${SAXON_VERSION}.jar net.sf.saxon.Query -qs:"." -s:com/atomgraph/linkeddatahub/xsl/{} -o:com/atomgraph/linkeddatahub/xsl/{} &amp;&amp; \\
    java -cp Saxon-HE-${SAXON_VERSION}.jar net.sf.saxon.Query -qs:"." -s:com/atomgraph/linkeddatahub/xsl/client.xsl -o:com/atomgraph/linkeddatahub/xsl/client.xsl &amp;&amp; \\
    java -cp Saxon-HE-${SAXON_VERSION}.jar net.sf.saxon.Query -qs:"." -s:net/example/xsl/client.xsl -o:net/example/xsl/client.xsl &amp;&amp; \\
    npx xslt3 -t -xsl:net/example/xsl/client.xsl -export:net/example/xsl/client.xsl.sef.json -nogo -ns:##html5 -relocate:on &amp;&amp; \\
    rm Saxon-HE-${SAXON_VERSION}.jar &amp;&amp; \\
    setfacl -Rm user:ldh:rwx net/example/xsl

WORKDIR $CATALINA_HOME</pre>
    </div>
    <div>
        <h2 id="java">Java</h2>
        <p>The Java layer of LinkedDataHub is a Maven project with a webapp layout. The codebase uses JAX-RS, specifically <a href="https://eclipse-ee4j.github.io/jersey/" target="_blank">Jersey 3</a>, as the HTTP/REST framework and uses <a href="https://jena.apache.org" target="_blank">Apache Jena</a> for RDF I/O.</p>
        <p>If you want to extend the Java codebase, for example to add a custom REST endpoint, you need to create a new Maven project with LinkedDataHub as dependency:</p>
        <pre>&lt;dependency&gt;
    &lt;groupId&gt;com.atomgraph&lt;/groupId&gt;
    &lt;artifactId&gt;linkeddatahub&lt;/artifactId&gt;
    &lt;version&gt;4.0.0&lt;/version&gt;
    &lt;classifier&gt;classes&lt;/classifier&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.atomgraph&lt;/groupId&gt;
    &lt;artifactId&gt;linkeddatahub&lt;/artifactId&gt;
    &lt;version&gt;4.0.0&lt;/version&gt;
    &lt;type&gt;war&lt;/type&gt;
&lt;/dependency&gt;</pre>
        <p>After adding the new endpoint, you'll also need to extend the LinkedDataHub's JAX-RS application (<code>com.atomgraph.linkeddatahub.Application</code>) and register your class there.</p>
        <p>By convention, static files (e.g. stylesheets, images) are placed in the <samp>src/main/webapp/static/</samp> folder in the codebase, which then becomes <samp>/usr/local/tomcat/webapps/ROOT/static/</samp> within the webapp deployed in the Docker container, and is available as <samp>${base}static/</samp> over HTTP.</p>
        <p>This means that if you want to deploy static files as part of your LinkedDataHub app, you will have to either mount them into the <samp>/usr/local/tomcat/webapps/ROOT/static/</samp> folder in the container, or copy them into a custom Docker image to the same effect.</p>
        <p>You can allow Java debugger access using <a href="../../reference/configuration/#debug">configuration properties</a>.</p>
    </div>
    <div>
        <h2 id="xslt">XSLT</h2>
        <p>LinkedDataHub uses XSLT 3.0 for UI rendering both on the server- and on the client-side.</p>
        <p>You can specify a custom server-side XSLT 3.0 stylesheet in the <a href="../manage-dataspaces/#change-stylesheet">dataspace configuration</a>. Then you can reuse LinkedDataHub's stylesheet by
            importing it as explained in the <a href="../change-layout/">change layout</a> user guide.</p>
    </div>
    <div>
        <h2 id="rdf">RDF</h2>
        <p>You can modify or extend the <a href="../../reference/dataset/#default-datasets">default RDF datasets</a> used by LinkedDataHub. However, a better practice is to use the 
        <a href="../../reference/command-line-interface/">CLI scripts</a> to create documents and import data.</p>
    </div>
    <p class="lead"><a href="https://github.com/AtomGraph/LinkedDataHub-Apps" target="_blank">See the LinkedDataHub app repository for more examples.</a></p>
</div>"""^^rdf:XMLLiteral .