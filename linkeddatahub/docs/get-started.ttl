@prefix def:    <https://w3id.org/atomgraph/linkeddatahub/default#> .
@prefix ldh:    <https://w3id.org/atomgraph/linkeddatahub#> .
@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd:    <http://www.w3.org/2001/XMLSchema#> .
@prefix dh:     <https://www.w3.org/ns/ldt/document-hierarchy#> .
@prefix dct:    <http://purl.org/dc/terms/> .
@prefix sioc:   <http://rdfs.org/sioc/ns#> .
@prefix spin:	<http://spinrdf.org/spin#> .

<> a dh:Container ;
    sioc:has_parent <..> ;
    dct:title "Get started" ;
    dct:description "All the basics of LinkedDataHub. From installation to extending the model and user interface." ;
    rdf:_1 <#content> ;
    rdf:_2 <#select-children> .

<#content> a ldh:XHTML ;
    rdf:value """<div xmlns="http://www.w3.org/1999/xhtml">
    <p class="lead">All the basics of LinkedDataHub. From installation to customizing the model and user interface.</p>
    <p>This guide will show how a LinkedDataHub application can be used to manage domain-specific RDF classes and instances. As an example, we will us <a href="https://www.w3.org/TR/skos-primer/" target="_blank">SKOS</a> concepts and concept schemes.</p>
    <p>Note that all <a href="../reference/content-model/documents/#manage" target="_blank">management actions</a> can also be performed using the <a href="../reference/command-line-interface/" target="_blank">CLI (Command Line Interface)</a>. Where applicable, the UI and CLI instructions are shown side by side. The <a href="https://github.com/AtomGraph/LinkedDataHub-Apps/tree/master/demo/skos" target="_blank">SKOS demo app</a> which implements the SKOS example which is used in this guide.</p>
    <div>
        <h2 id="setup">Setup</h2>
        <p>Setup is only required if you plan to run your own instance of LinkedDataHub. It consists of few steps, which involve creating a configuration file and running a
            <code>docker-compose</code> command.</p>
        <p class="lead"><a href="setup/" target="_blank">Read setup instructions.</a></p>
        <p>If you want to use an existing instance of LinkedDataHub, proceed to the next step.</p>
    </div>
    <div>
        <h2 id="get-an-account">Get an account</h2>
        <p>With LinkedDataHub, you obtain a WebID and use its client certificate for authentication. You can obtain the WebID either by setting up your own instance or signing up on
            an existing instance. Alternatively, you can authenticate using your social login.</p>
        <p class="lead"><a href="get-an-account/" target="_blank">Read instructions on getting an account.</a></p>
    </div>
    <div>
        <h2 id="request-access">Request access</h2>
        <p>After you login to (authenticate with) a LinkedDataHub instance, the next step is getting an authorization from its owners that allows you to view and possibly append or edit documents. That is done by issuing an access request.</p>
        <p class="lead"><a href="request-access/" target="_blank">Read instructions on requesting access.</a></p>
    </div>

    <div>
        <h2 id="create-document">Create a document</h2>
        <p>You will need to create documents if you want to store data in LinkedDataHub. Documents are RDF Linked Data resources as well as named graphs in the application's dataset.</p>
        <p>There are types of documents supported by LinkedDataHub: containers and items. Containers can have children documents, just like folders in a filesystem. Items usually contain content and/or are paired with
            non-informations resources such as abstract concepts or physical objects.</p>
        <p class="lead"><a href="../user-guide/create-data/create-documents/" target="_blank">Follow a tutorial to create a container.</a></p>
    </div>
    <div>
        <h2 id="create-resource">Create a resource</h2>
        <p>Out of the box, you can create instances of classes that LinkedDataHub ships with by default. Those are built-in classes in system ontologies such as container and item mentioned above, all forms of SPARQL queries, charts, data imports, files etc.</p>
        <p>LinkedDataHub also allows creation of instances of user-defined classes from ontologies imported by the user.</p>
        <p class="lead"><a href="../user-guide/create-data/create-resources/" target="_blank">Learn how to create instances of built-in and user-defined classes.</a></p>
    </div>
    <div>
        <h2 id="change-model">Change the model</h2>
        <p>In order to be able to instance data, we need to create <a href="../reference/administration/ontologies/#classes" target="_blank">classes</a> that represent them (and ontologies where those classes are defined) in the <a href="../reference/administration/ontologies/" target="_blank">model</a> of our dataspace. Not only will they serve as RDF types of the instances, but will have <a href="../reference/administration/ontologies/#constructors" target="_blank">constructors</a> attached that define the default properties and their (data)types for that class.</p>
        <p class="lead"><a href="../user-guide/change-model/" target="_blank">Follow a tutorial to change the model: create a class and its constructor.</a></p>
    </div>

    <div>
        <h2 id="import-csv">Import CSV data</h2>
        <p>A common step at this point would be to populate your dataset with instances by importing data. LinkedDataHub currently supports CSV and RDF <a href="../reference/imports/" target="_blank">data imports</a>.</p>
        <p class="lead"><a href="../user-guide/import-data/import-csv-data/" target="_blank">Follow a tutorial to import CSV data and map it to RDF.</a></p>
    </div>
    <div>
        <h2 id="change-layout">Change the layout</h2>
        <p>User interface changes are done by adding and overriding templates in <a href="../reference/stylesheets/" target="_blank">XSLT stylesheets</a>.</p>
        <p class="lead"><a href="../user-guide/change-layout/" target="_blank">Follow a tutorial to change the layout: create an XSLT stylesheet and override a template.</a></p>
    </div>
</div>"""^^rdf:XMLLiteral .

<#select-children> a ldh:Object ;
    rdf:value ldh:ChildrenView .
