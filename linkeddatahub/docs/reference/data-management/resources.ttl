@prefix def:    <https://w3id.org/atomgraph/linkeddatahub/default#> .
@prefix ldh:    <https://w3id.org/atomgraph/linkeddatahub#> .
@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd:    <http://www.w3.org/2001/XMLSchema#> .
@prefix dh:     <https://www.w3.org/ns/ldt/document-hierarchy#> .
@prefix dct:    <http://purl.org/dc/terms/> .
@prefix sioc:   <http://rdfs.org/sioc/ns#> .
  
<> a dh:Item ;
    sioc:has_container <..> ;
    dct:title "Resource management" ;
    dct:description "Creating and editing RDF resources of built-in and user-defined types" ;
    rdf:_1 <#content> .

<#content> a ldh:XHTML ;
    rdf:value """<div xmlns="http://www.w3.org/1999/xhtml">
    <p class="lead">Creating and editing RDF resources of built-in and user-defined types</p>
    <div>
        <p>Within <a href="../documents/">documents</a>, users can create RDF resources, i.e. instances of both built-in and user-defined RDF classes.</p>
        <p>Built-in classes are defined in <a href="../../administration/model/#ontologies">system ontologies</a> while user-defined classes are defined in user ontologies.</p>
        <div>
            <h2 id="user-defined-classes">User-defined classes</h2>
            <p>TBD</p>
        </div>
        <div>
            <h2 id="built-in-classes">Built-in classes</h2>
            <p>LinkedDataHub's built-in <a href="../../administration/model/#classes">classes</a> have pre-defined <a href="../../administration/model/#constructors">constructors</a>, <a href="../../administration/model/#constraints">constraints</a> and often a customized UI rendering (implemented by <a href="../../stylesheets/#overriding-templates">overriding generic XSLT templates</a> with type-specific templates) as well, for example a query editor or a chart.</p>
            <div>
                <h3 id="query">Query</h3>
                <p>
                    <img alt="Query block" src="../../../uploads/cbe31147634bb2be12f1a4f60ff56f690a33542e"></img>
                </p>
                <p>Queries are SPARQL 1.1 query strings that can be executed interactively. They can be defined with a SPARQL 
                service that they execute against, otherwise they execute against the application's own SPARQL service.</p>
                <p>It is only possible to save valid SPARQL 1.1 query strings. SPARQL updates are currently not supported.</p>
            </div>
            <div>
                <h3 id="view">View</h3>
                <p>
                    <img alt="View block" src="../../../uploads/97792fb1084524c89c92b6f99b070ac1b283d4f6"></img>
                </p>
                <p>Views are interactive, paginated, and optionally ordered results of a SPARQL <code>SELECT</code> result set.
                What is rendered in the UI is not directly the tabular result however, but descriptions of the resources selected
                by the result set. That is achieved by on-the-fly SPARQL query rewriting.</p>
                <p>To render paginated lists of resources, legacy applications would normally have a dedicated API endpoint that
                supports pagination, ordering etc. In LinkedDataHub, views achieve the same functionality by simply building the
                SPARQL query string on the client-side. Therefore views can be seen as client-side "containers".</p>
                <p>Views can be rendered in multiple layout modes: properties, list, grid, table, map, chart etc. They also show
                the total number of results and allow result ordering by property.</p>
            </div>
            <div>
                <h3 id="chart">Chart</h3>
                <p>
                    <img alt="Chart block" src="../../../uploads/fde3b3b56d1ff518921f0a604cb45bbf0ae87650"></img>
                </p>
                <p>Charts can render results of both tabular SPARQL <code>SELECT</code> results and graph results of
                <code>DESCRIBE</code> and <code>CONSTRUCT</code>. In that sense they are similar to the chart layout mode in 
                views, but charts also store the chart type as well as the category and series information: variable names in the
                case of tabular results, and property URIs in the case of graph results.</p>
                <p>The default chart type is the table. Other chart types might not apply to all result data; for example a
                scatter chart will need a numeric or datetime values for both category and series.</p>
            </div>
        </div>
    </div>
</div>"""^^rdf:XMLLiteral .