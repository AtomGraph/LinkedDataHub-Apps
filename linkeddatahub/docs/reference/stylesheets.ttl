@prefix ns:     <ns#> .
@prefix def:    <ns/default#> .
@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd:    <http://www.w3.org/2001/XMLSchema#> .
@prefix dh:     <https://www.w3.org/ns/ldt/document-hierarchy/domain#> .
@prefix dct:    <http://purl.org/dc/terms/> .
@prefix sioc:   <http://rdfs.org/sioc/ns#> .
  
<reference/stylesheets/> a def:Item ;
    sioc:has_container <reference/> ;
    dct:title "Stylesheets" ;
    dct:description "Built-in XSLT and CSS stylesheets" ;
    sioc:content """<div xmlns="http://www.w3.org/1999/xhtml">
    <p class="lead">Built-in XSLT and CSS stylesheets</p>
    <div>
        <h2 id="xslt">XSLT</h2>
        <p>LinkedDataHub's <a href="https://www.w3.org/TR/xslt20/" target="_blank">XSLT 2.0</a> stylesheets work by transforming <a href="https://www.w3.org/TR/rdf-syntax-grammar/" target="_blank">RDF/XML</a> response body from the underlying <a href="../http-api/" target="_blank">HTTP API</a>. Additional metadata from RDF vocabularies is used to improve user experience.</p>
        <div>
            <h3 id="rdf-xml-plain">Plain RDF/XML</h3>
            <p>The stylesheets use Jena's <a href="https://jena.apache.org/documentation/io/rdfxml_howto.html#rdfxml-rdfxml-abbrev" target="_blank">"plain" RDF/XML</a> output which groups statements by subject and does not nest resource descriptions. This allows for predictable XPath patterns:</p>
            <ul>
                <li><code>/rdf:RDF</code> — represents the RDF graph</li>
                <li><code>/rdf:RDF/rdf:Description</code> or <code>/rdf:RDF/*[*][@rdf:about] | /rdf:RDF/*[*][@rdf:nodeID]</code>— resource description which contains properties</li>
                <li><code>/rdf:RDF/rdf:Description/@rdf:about</code> — subject resource URI</li>
                <li><code>/rdf:RDF/rdf:Description/@rdf:nodeID</code> — subject blank node ID</li>
                <li><code>/rdf:RDF/rdf:Description/*</code> predicate (e.g. <code>rdf:type</code>) which URI is <code>concat(namespace-uri(), local-name())</code></li>
                <li><code>/rdf:RDF/rdf:Description/*/@rdf:resource</code> — object resource</li>
                <li><code>/rdf:RDF/rdf:Description/*/@rdf:nodeID</code> — object blank node ID</li>
                <li><code>/rdf:RDF/rdf:Description/*/text()</code> — literal value</li>
            </ul>
        </div>
        <div>
            <h3 id="stylesheets">Stylesheets</h3>
            <p>One XSLT stylesheet can be specified per application. In order to reuse LinkedDataHub's built-in templates, it should import the <a href="https://github.com/AtomGraph/LinkedDataHub/blob/master/src/main/webapp/static/com/atomgraph/linkeddatahub/xsl/bootstrap/2.3.2/layout.xsl" target="_blank">system stylesheet <samp>layout.xsl</samp></a> and only override the necessary templates. That is however not a requirement, the stylesheet could also use its own independent transformation logic.</p>
            <p>If there is no stylesheet specified for the application, the system stylesheet is used. It defines the overall layout and imports resource-level and container-specific stylesheets, as well as per-vocabulary stylesheets.</p>
            <p><code>&lt;xsl:import&gt;</code> is used to import one stylesheet into another. The import mechanism is specified in <a href="https://www.w3.org/TR/xslt20/#import" target="_blank">3.10.3 Stylesheet Import</a> the XSLT 2.0 specification. It should not be confused with stylesheet inclusion.</p>
            <p>Note that LinkedDataHub itself imports stylesheets from <a href="https://github.com/AtomGraph/Web-Client" target="_blank">Web-Client</a>, which uses the same template modes but produces a much simpler layout.</p>
            <p>There is also a special <a href="https://github.com/AtomGraph/LinkedDataHub/blob/master/src/main/webapp/static/com/atomgraph/linkeddatahub/xsl/client.xsl" target="_blank">client-side stylesheet</a> which is not used to render a full layout, but only manipulate DOM elements in the browser in response to user or system events. Currently it is processed using <a href="http://www.saxonica.com/ce/index.xml" target="_blank">Saxon-CE</a> which provides client-side extensions for XSLT 2.0, but a move to XSLT 3.0 and <a href="http://www.saxonica.com/saxon-js/index.xml" target="_blank">Saxon-JS</a> is planned. It imports and reuses some of the same sub-stylesheets as the server-side system stylesheet does, but avoids loading per-vocabulary stylesheets in order to improve page load time. Templates of the client-side stylesheet can also be overridden.</p>
        </div>
        <div>
            <h3 id="templates">Templates</h3>
            <p>XSLT template components:</p>
            <dl>
                <dt>Match</dt>
                <dd>XPath-based match pattern which either does or does not match an XML node</dd>
                <dt>Mode</dt>
                <dd>Allows to group templates and distinguish them from other groups which have the same match patterns (e.g. different layout modes)</dd>
                <dt>Parameters</dt>
                <dd>XSD-typed parameters passed to the stylesheet invocation</dd>
                <dt>Body</dt>
                <dd>Contains the XML output nodes as well as XSLT processing instructions</dd>
            </dl>
            <p>XSLT processing starts at the root of the RDF/XML document and produces HTML elements by applying templates on all of the RDF/XML nodes while moving down the XML tree.
                In other words, it starts at the graph level, moves down to resource description elements, then to property elements, and ends with identifier attributes and literal text nodes.</p>
            <p>Templates are applied (invoked) using <code>&lt;xsl:apply-templates&gt;</code>. Mode can be specified, e.g. <code>&lt;xsl:apply-templates mode="bs2:Header"&gt;</code>. To stay in the current mode without explicitly specifying it, use <code>&lt;xsl:apply-templates mode="#current"&gt;</code>. <code>&lt;xsl:with-param&gt;</code> is used to supply parameters.</p>
            <p>LinkedDataHub provides the following default template modes, which are used to render the <a href="../user-interface/#layout-modes" target="_blank">layout modes</a>:</p>
            <ul>
                <li>Graph-level modes that apply to <code>rdf:RDF</code>
                    <ul>
                        <li><code>bs2:Block</code> which renders full resource description with all properties</li>
                        <li><code>bs2:BlockList</code> renders a list of resources</li>
                        <li><code>xhtml:Table</code> renders a table with resources as rows and properties as columns</li>
                        <li><code>bs2:Grid</code> renders a gallery of thumbnails</li>
                        <li><code>bs2:Form</code> which renders an <a href="http://www.lsrn.org/semweb/rdfpost.html" target="_blank">RDF/POST</a> form for for creation of new resources (when <code>$ac:forClass</code> parameter is set) or editing of existing resource</li>
                    </ul>
                </li>
                <li>Resource-level templates modes that apply to <code>rdf:Description</code>
                    <ul>
                        <li><code>bs2:Block</code> renders full resource description (by default header and property list)</li>
                        <li><code>bs2:Header</code> renders resource header (by default with type information)</li>
                        <li><code>bs2:PropertyList</code> renders definition list with property names and values (by default grouped by resource types)</li>
                    </ul>
                </li>
            </ul>
            <p><code>bs2:</code> prefix is used for <a href="https://getbootstrap.com/2.3.2/" target="_blank">Bootstrap 2.3.2</a>-specific templates, <code>xhtml:</code> prefix is used for generic HTML templates. When adding new user-defined modes, it is recommended to choose a new namespace for them as well as a user-defined prefix.</p>
            <p>An example of a template that matches <code>rdf:Description</code>:</p>
            <pre>&lt;xsl:template match="*[*][@rdf:about] | *[*][@rdf:nodeID]" mode="bs2:Block"&gt;
    &lt;xsl:param name="id" as="xs:string?"/&gt;
    &lt;xsl:param name="class" as="xs:string?"/&gt;

    &lt;div&gt;
        &lt;xsl:if test="$id"&gt;
            &lt;xsl:attribute name="id"&gt;&lt;xsl:value-of select="$id"/&gt;&lt;/xsl:attribute&gt;
        &lt;/xsl:if&gt;
        &lt;xsl:if test="$class"&gt;
            &lt;xsl:attribute name="class"&gt;&lt;xsl:value-of select="$class"/&gt;&lt;/xsl:attribute&gt;
        &lt;/xsl:if&gt;

        &lt;xsl:apply-templates select="." mode="bs2:Header"/&gt;

        &lt;xsl:apply-templates select="." mode="bs2:PropertyList"/&gt;
    &lt;/div&gt;
&lt;/xsl:template&gt;</pre>
            <p><code>apl:Content</code> mode embeds XHTML from the <code>sioc:content</code> value of the current document.</p>
            <p>There are a few special template modes such as <code>ac:label</code> and <code>ac:description</code> and related functions <code>ac:label()</code> and <code>ac:description()</code> which are
                used not to render layout but to extract metadata from resource descriptions. They can be used to retrieve a resource label and description no matter which RDF
                vocabularies are used in the data. They do so by invoking templates of respective mode from vocabulary-specific stylesheets.</p>
        </div>
        <div>
            <h3 id="overriding-templates">Overriding templates</h3>
            <p>Templates are overridden by redefining them in the importing stylesheet and providing the same or more specific match pattern and the same mode. The XSLT specification specifies exactly how template priorities are determined in <a href="https://www.w3.org/TR/xslt20/#conflict" target="_blank">6.4 Conflict Resolution for Template Rules</a>.</p>
            <p>The overriding template can then get the output of the overridden template by invoking either <code>&lt;xsl:apply-imports&gt;</code> or <code>&lt;xsl:next-match&gt;</code>. Read more about <a href="https://www.w3.org/TR/xslt20/#apply-imports" target="_blank">6.7 Overriding Template Rules</a>.</p>
            <p>Always override the most specific template, i.e. if you want to change how a property is rendered, do not override the template for resource description, only the one for the property.</p>
        </div>
    </div>
    <div>
        <h2 id="css">CSS</h2>
        <p><a href="https://getbootstrap.com/2.3.2/" target="_blank">Bootstrap 2.3.2</a> theme is used with some customizations.</p>
        <p>The CSS stylesheets is specified in the <code>xhtml:Style</code> XSLT template mode.</p>
    </div>
    <div>
        <h2 id="javascript">JavaScript</h2>
        <p>The JavaScript files are specified in the <code>xhtml:Script</code> XSLT template mode.</p>
    </div>
</div>"""^^rdf:XMLLiteral .